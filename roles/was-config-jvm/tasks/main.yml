---
- name: Setting host for profile_name
  ansible.builtin.set_fact:
    profile_name: "{{ ansible_hostname }}"

- name: Print the Profilename
  ansible.builtin.debug:
    msg: "{{ profile_name }}"

- name: "Verifiy if Profile already exists"
  ansible.builtin.stat:
    path: "{{ was_base_path }}/profiles/{{ profile_name }}"
  register: profile_already_exists

- name: Verify if pid file
  ansible.builtin.shell: ps -p `cat "{{ was_base_path }}/profiles/{{ profile_name }}/logs/dmgr/dmgr.pid"`
  register: "dmgr_is_running"
  ignore_errors: true
  changed_when: dmgr_is_running.rc != 0

- name: "Verifiy if JVM is already configured"
  ansible.builtin.stat:
    path: "{{ response_file }}"
  register: jvm_already_configured

- name: "Generate Response file"
  ansible.builtin.template:
    src: "{{ template_file }}"
    dest: "{{ response_file }}"
    owner: "{{ was_owner }}"
    group: "{{ was_group }}"
    mode: '0755'
  when: not jvm_already_configured.stat.exists

- name: "Configure JVM"
  ansible.builtin.command: >
    sh wsadmin.sh -lang jython -username {{ was_username }} -password {{ was_password }} -f {{ response_file }} {{ command_line_arg }}
  register: config_jvm_output_reg
  args:
    chdir: "{{ bin_directory }}"
  changed_when: config_jvm_output_reg.rc == 0
  when: not jvm_already_configured.stat.exists

- name: Print the result of JVM Configuration
  ansible.builtin.debug:
    msg: "{{ config_jvm_output_reg }}"
  when: not jvm_already_configured.stat.exists

- name: "Purge Response file"
  ansible.builtin.file:
    path: "{{ response_file }}"
    state: absent
